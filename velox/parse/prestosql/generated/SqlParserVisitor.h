/* Generated By:JavaCC: Do not edit this line. SqlParserVisitor.h Version 7.0.10 */
#ifndef SQLPARSERVISITOR_H
#define SQLPARSERVISITOR_H

#include "JavaCC.h"
#include "SqlParserTree.h"
namespace commonsql {
namespace parser {
class SqlParserVisitor
{
  public:
  virtual void  visit(const SimpleNode *node, void * data) = 0;
  virtual void  visit(const CompilationUnit *node, void * data) = 0;
  virtual void  visit(const UnaryExpression *node, void * data) = 0;
  virtual void  visit(const UnsignedNumericLiteral *node, void * data) = 0;
  virtual void  visit(const CharStringLiteral *node, void * data) = 0;
  virtual void  visit(const DateLiteral *node, void * data) = 0;
  virtual void  visit(const TimeLiteral *node, void * data) = 0;
  virtual void  visit(const TimestampLiteral *node, void * data) = 0;
  virtual void  visit(const IntervalLiteral *node, void * data) = 0;
  virtual void  visit(const BooleanLiteral *node, void * data) = 0;
  virtual void  visit(const Unsupported *node, void * data) = 0;
  virtual void  visit(const Identifier *node, void * data) = 0;
  virtual void  visit(const TableName *node, void * data) = 0;
  virtual void  visit(const SchemaName *node, void * data) = 0;
  virtual void  visit(const CatalogName *node, void * data) = 0;
  virtual void  visit(const SchemaQualifiedName *node, void * data) = 0;
  virtual void  visit(const PredefinedType *node, void * data) = 0;
  virtual void  visit(const RowType *node, void * data) = 0;
  virtual void  visit(const ArrayType *node, void * data) = 0;
  virtual void  visit(const FieldDefinition *node, void * data) = 0;
  virtual void  visit(const ParenthesizedExpression *node, void * data) = 0;
  virtual void  visit(const BuiltinValue *node, void * data) = 0;
  virtual void  visit(const NullLiteral *node, void * data) = 0;
  virtual void  visit(const ArrayLiteral *node, void * data) = 0;
  virtual void  visit(const QualifiedName *node, void * data) = 0;
  virtual void  visit(const GroupingOperation *node, void * data) = 0;
  virtual void  visit(const WindowFunction *node, void * data) = 0;
  virtual void  visit(const RowNumber *node, void * data) = 0;
  virtual void  visit(const RankFunction *node, void * data) = 0;
  virtual void  visit(const NtileFunction *node, void * data) = 0;
  virtual void  visit(const LeadOrLag *node, void * data) = 0;
  virtual void  visit(const NullTreatment *node, void * data) = 0;
  virtual void  visit(const FirstOrLastValueFunction *node, void * data) = 0;
  virtual void  visit(const NullIf *node, void * data) = 0;
  virtual void  visit(const Coalesce *node, void * data) = 0;
  virtual void  visit(const CaseExpression *node, void * data) = 0;
  virtual void  visit(const WhenClause *node, void * data) = 0;
  virtual void  visit(const ElseClause *node, void * data) = 0;
  virtual void  visit(const WhenOperand *node, void * data) = 0;
  virtual void  visit(const SearchedCaseOperand *node, void * data) = 0;
  virtual void  visit(const CastExpression *node, void * data) = 0;
  virtual void  visit(const FieldReference *node, void * data) = 0;
  virtual void  visit(const FunctionCall *node, void * data) = 0;
  virtual void  visit(const AggregationFunction *node, void * data) = 0;
  virtual void  visit(const Unused *node, void * data) = 0;
  virtual void  visit(const Lambda *node, void * data) = 0;
  virtual void  visit(const ArrayElement *node, void * data) = 0;
  virtual void  visit(const AdditiveExpression *node, void * data) = 0;
  virtual void  visit(const MultiplicativeExpression *node, void * data) = 0;
  virtual void  visit(const BuiltinFunctionCall *node, void * data) = 0;
  virtual void  visit(const ArgumentList *node, void * data) = 0;
  virtual void  visit(const TimeZoneField *node, void * data) = 0;
  virtual void  visit(const Concatenation *node, void * data) = 0;
  virtual void  visit(const OrExpression *node, void * data) = 0;
  virtual void  visit(const AndExpression *node, void * data) = 0;
  virtual void  visit(const NotExpression *node, void * data) = 0;
  virtual void  visit(const IsExpression *node, void * data) = 0;
  virtual void  visit(const RowExpression *node, void * data) = 0;
  virtual void  visit(const RowExression *node, void * data) = 0;
  virtual void  visit(const Values *node, void * data) = 0;
  virtual void  visit(const TableExpression *node, void * data) = 0;
  virtual void  visit(const FromClause *node, void * data) = 0;
  virtual void  visit(const CommaJoin *node, void * data) = 0;
  virtual void  visit(const Join *node, void * data) = 0;
  virtual void  visit(const TableSample *node, void * data) = 0;
  virtual void  visit(const AliasedTable *node, void * data) = 0;
  virtual void  visit(const Alias *node, void * data) = 0;
  virtual void  visit(const Unnest *node, void * data) = 0;
  virtual void  visit(const ColumnNames *node, void * data) = 0;
  virtual void  visit(const OnClause *node, void * data) = 0;
  virtual void  visit(const UsingClause *node, void * data) = 0;
  virtual void  visit(const WhereClause *node, void * data) = 0;
  virtual void  visit(const GroupbyClause *node, void * data) = 0;
  virtual void  visit(const Rollup *node, void * data) = 0;
  virtual void  visit(const Cube *node, void * data) = 0;
  virtual void  visit(const GroupingSets *node, void * data) = 0;
  virtual void  visit(const HavingClause *node, void * data) = 0;
  virtual void  visit(const WindowSpecification *node, void * data) = 0;
  virtual void  visit(const PartitionByClause *node, void * data) = 0;
  virtual void  visit(const OrderByClause *node, void * data) = 0;
  virtual void  visit(const WindowFrameUnits *node, void * data) = 0;
  virtual void  visit(const WindowFrameExtent *node, void * data) = 0;
  virtual void  visit(const UnboundedPreceding *node, void * data) = 0;
  virtual void  visit(const CurrentRow *node, void * data) = 0;
  virtual void  visit(const WindowFramePreceding *node, void * data) = 0;
  virtual void  visit(const WindowFrameBetween *node, void * data) = 0;
  virtual void  visit(const UnboundedFollowing *node, void * data) = 0;
  virtual void  visit(const WindowFrameFollowing *node, void * data) = 0;
  virtual void  visit(const Select *node, void * data) = 0;
  virtual void  visit(const SelectList *node, void * data) = 0;
  virtual void  visit(const SelectItem *node, void * data) = 0;
  virtual void  visit(const Star *node, void * data) = 0;
  virtual void  visit(const QuerySpecification *node, void * data) = 0;
  virtual void  visit(const WithClause *node, void * data) = 0;
  virtual void  visit(const Cte *node, void * data) = 0;
  virtual void  visit(const SetOperation *node, void * data) = 0;
  virtual void  visit(const Subquery *node, void * data) = 0;
  virtual void  visit(const Comparison *node, void * data) = 0;
  virtual void  visit(const Between *node, void * data) = 0;
  virtual void  visit(const InPredicate *node, void * data) = 0;
  virtual void  visit(const InvalueList *node, void * data) = 0;
  virtual void  visit(const Like *node, void * data) = 0;
  virtual void  visit(const IsNull *node, void * data) = 0;
  virtual void  visit(const QuantifiedComparison *node, void * data) = 0;
  virtual void  visit(const Exists *node, void * data) = 0;
  virtual void  visit(const IsDistinct *node, void * data) = 0;
  virtual void  visit(const InvervalQualifier *node, void * data) = 0;
  virtual void  visit(const NonSecondField *node, void * data) = 0;
  virtual void  visit(const SecondField *node, void * data) = 0;
  virtual void  visit(const NonSecondDateTimeField *node, void * data) = 0;
  virtual void  visit(const LanguageClause *node, void * data) = 0;
  virtual void  visit(const NamedArgument *node, void * data) = 0;
  virtual void  visit(const SetQuantifier *node, void * data) = 0;
  virtual void  visit(const FilterClause *node, void * data) = 0;
  virtual void  visit(const SortSpecificationList *node, void * data) = 0;
  virtual void  visit(const SortSpecification *node, void * data) = 0;
  virtual void  visit(const OrderingDirection *node, void * data) = 0;
  virtual void  visit(const NullOrdering *node, void * data) = 0;
  virtual void  visit(const CreateSchema *node, void * data) = 0;
  virtual void  visit(const Unsuppoerted *node, void * data) = 0;
  virtual void  visit(const TableDefinition *node, void * data) = 0;
  virtual void  visit(const Insert *node, void * data) = 0;
  virtual void  visit(const DirectSqlStatement *node, void * data) = 0;
  virtual void  visit(const UseStatement *node, void * data) = 0;
  virtual void  visit(const LambdaBody *node, void * data) = 0;
  virtual void  visit(const LambdaParams *node, void * data) = 0;
  virtual void  visit(const LambdaParam *node, void * data) = 0;
  virtual void  visit(const LimitClause *node, void * data) = 0;
  virtual void  visit(const ParameterizedType *node, void * data) = 0;
  virtual void  visit(const MapType *node, void * data) = 0;
  virtual void  visit(const TryExpression *node, void * data) = 0;
  virtual ~SqlParserVisitor() { }
};
class SqlParserDefaultVisitor : public SqlParserVisitor {
public:
  virtual void  defaultVisit(const SimpleNode *node, void * data) = 0;
  virtual void  visit(const SimpleNode *node, void * data) {
    defaultVisit(node, data);
}
  virtual void  visit(const CompilationUnit *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const UnaryExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const UnsignedNumericLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const CharStringLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const DateLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TimeLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TimestampLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const IntervalLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const BooleanLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Unsupported *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Identifier *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TableName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SchemaName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const CatalogName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SchemaQualifiedName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const PredefinedType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const RowType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ArrayType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const FieldDefinition *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ParenthesizedExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const BuiltinValue *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NullLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ArrayLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const QualifiedName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const GroupingOperation *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WindowFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const RowNumber *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const RankFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NtileFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const LeadOrLag *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NullTreatment *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const FirstOrLastValueFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NullIf *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Coalesce *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const CaseExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WhenClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ElseClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WhenOperand *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SearchedCaseOperand *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const CastExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const FieldReference *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const FunctionCall *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const AggregationFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Unused *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Lambda *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ArrayElement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const AdditiveExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const MultiplicativeExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const BuiltinFunctionCall *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ArgumentList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TimeZoneField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Concatenation *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const OrExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const AndExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NotExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const IsExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const RowExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const RowExression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Values *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TableExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const FromClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const CommaJoin *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Join *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TableSample *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const AliasedTable *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Alias *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Unnest *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ColumnNames *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const OnClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const UsingClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WhereClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const GroupbyClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Rollup *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Cube *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const GroupingSets *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const HavingClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WindowSpecification *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const PartitionByClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const OrderByClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WindowFrameUnits *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WindowFrameExtent *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const UnboundedPreceding *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const CurrentRow *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WindowFramePreceding *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WindowFrameBetween *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const UnboundedFollowing *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WindowFrameFollowing *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Select *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SelectList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SelectItem *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Star *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const QuerySpecification *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const WithClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Cte *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SetOperation *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Subquery *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Comparison *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Between *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const InPredicate *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const InvalueList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Like *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const IsNull *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const QuantifiedComparison *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Exists *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const IsDistinct *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const InvervalQualifier *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NonSecondField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SecondField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NonSecondDateTimeField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const LanguageClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NamedArgument *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SetQuantifier *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const FilterClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SortSpecificationList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const SortSpecification *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const OrderingDirection *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const NullOrdering *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const CreateSchema *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Unsuppoerted *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TableDefinition *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const Insert *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const DirectSqlStatement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const UseStatement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const LambdaBody *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const LambdaParams *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const LambdaParam *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const LimitClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ParameterizedType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const MapType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const TryExpression *node, void * data) {
    defaultVisit(node, data);
  }
  ~SqlParserDefaultVisitor() { }
};
}
}
#endif
/* JavaCC - OriginalChecksum=98d6ce94c61e936652567680a50916a6 (do not edit this line) */
